#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.14
# from Racc grammer file "".
#

require 'racc/parser.rb'
module Querly
  module Pattern
    class Parser < Racc::Parser

module_eval(<<'...end parser.y/module_eval...', 'parser.y', 108)

require "strscan"

attr_reader :input
attr_reader :where

def initialize(input, where:)
  super()
  @input = StringScanner.new(input)
  @where = where
end

def self.parse(str, where:)
  self.new(str, where: where).do_parse
end

def next_token
  input.scan(/\s+/)

  case
  when input.eos?
    [false, false]
  when input.scan(/true\b/)
    [:BOOL, true]
  when input.scan(/false\b/)
    [:BOOL, false]
  when input.scan(/nil/)
    [:NIL, false]
  when input.scan(/:string:/)
    [:STRING, nil]
  when input.scan(/:dstr:/)
    [:DSTR, nil]
  when input.scan(/:int:/)
    [:INT, nil]
  when input.scan(/:float:/)
    [:FLOAT, nil]
  when input.scan(/:bool:/)
    [:BOOL, nil]
  when input.scan(/:symbol:/)
    [:SYMBOL, nil]
  when input.scan(/:number:/)
    [:NUMBER, nil]
  when input.scan(/:regexp:/)
    [:REGEXP, nil]
  when input.scan(/:\w+/)
    s = input.matched
    [:SYMBOL, s[1, s.size - 1].to_sym]
  when input.scan(/as\b/)
    [:AS, :as]
  when input.scan(/{}/)
    [:WITH_BLOCK, nil]
  when input.scan(/!{}/)
    [:WITHOUT_BLOCK, nil]
  when input.scan(/[+-]?[0-9]+\.[0-9]/)
    [:FLOAT, input.matched.to_f]
  when input.scan(/[+-]?[0-9]+/)
    [:INT, input.matched.to_i]
  when input.scan(/\_/)
    [:UNDERBAR, input.matched]
  when input.scan(/[A-Z]\w*/)
    [:UIDENT, input.matched.to_sym]
  when input.scan(/self/)
    [:SELF, nil]
  when input.scan(/'[a-z]\w*/)
    s = input.matched
    [:META, s[1, s.size - 1].to_sym]
  when input.scan(/[a-z_](\w)*(\?|\!|=)?/)
    [:LIDENT, input.matched.to_sym]
  when input.scan(/\(/)
    [:LPAREN, input.matched]
  when input.scan(/\)/)
    [:RPAREN, input.matched]
  when input.scan(/\.\.\./)
    [:DOTDOTDOT, input.matched]
  when input.scan(/\,/)
    [:COMMA, input.matched]
  when input.scan(/\./)
    [:DOT, input.matched]
  when input.scan(/\!/)
    [:EXCLAMATION, input.matched.to_sym]
  when input.scan(/\[conditional\]/)
    [:CONDITIONAL_KIND, false]
  when input.scan(/\[!conditional\]/)
    [:CONDITIONAL_KIND, true]
  when input.scan(/\[discarded\]/)
    [:DISCARDED_KIND, false]
  when input.scan(/\[!discarded\]/)
    [:DISCARDED_KIND, true]
  when input.scan(/\[\]=/)
    [:METHOD, :"[]="]
  when input.scan(/\[\]/)
    [:METHOD, :"[]"]
  when input.scan(/::/)
    [:COLONCOLON, input.matched]
  when input.scan(/:/)
    [:COLON, input.matched]
  when input.scan(/\*/)
    [:STAR, "*"]
  when input.scan(/@\w+/)
    [:IVAR, input.matched.to_sym]
  when input.scan(/@/)
    [:IVAR, nil]
  when input.scan(/&/)
    [:AMP, nil]
  end
end

def resolve_meta(name)
  where[name] or raise Racc::ParseError, "Undefined meta variable: '#{name}"
end
...end parser.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
   -42,    32,    29,   -43,    70,   -42,    32,    69,    64,    38,
    39,    35,   -43,    79,    80,   -41,    50,    43,    38,    39,
    42,    33,   -44,    68,    22,    23,    33,    38,    39,    40,
    38,    39,    38,    39,   -45,    38,    39,    48,    40,    38,
    39,    21,    45,    46,     7,    32,    33,    49,    84,     6,
     8,    22,    23,    10,    11,    12,    51,    14,    15,    16,
    17,    18,    19,    20,    40,    33,     7,    13,    21,    25,
    26,     6,     8,    22,    23,    10,    11,    12,    71,    14,
    15,    16,    17,    18,    19,    20,    73,   nil,     7,    13,
    21,    25,    26,     6,     8,    22,    23,    10,    11,    12,
   nil,    14,    15,    16,    17,    18,    19,    20,   nil,   nil,
    53,    13,    21,    25,    26,     6,     8,    22,    23,    10,
    11,    12,   nil,    14,    15,    16,    17,    18,    19,    20,
   nil,    55,    57,     7,    21,    60,    61,   nil,     6,     8,
    22,    23,    10,    11,    12,   nil,    14,    15,    16,    17,
    18,    19,    20,   nil,   nil,     7,    13,    21,    60,    61,
     6,     8,    22,    23,    10,    11,    12,   nil,    14,    15,
    16,    17,    18,    19,    20,   nil,   nil,    53,    13,    21,
    25,    26,     6,     8,    22,    23,    10,    11,    12,   nil,
    14,    15,    16,    17,    18,    19,    20,   nil,    55,    57,
   nil,    21,    60,    61,    53,    13,   nil,    32,   nil,     6,
     8,    22,    23,    10,    11,    12,    78,    14,    15,    16,
    17,    18,    19,    20,    78,    55,    57,    33,    21,    60,
    61,    32,   nil,   nil,   nil,   nil,   nil,    76,    77,   nil,
   nil,    79,    80,   nil,   nil,    76,    77,     7,    13,    79,
    80,    33,     6,     8,    22,    23,    10,    11,    12,   nil,
    14,    15,    16,    17,    18,    19,    20,   nil,   nil,     7,
    13,    21,    25,    26,     6,     8,    22,    23,    10,    11,
    12,   nil,    14,    15,    16,    17,    18,    19,    20,   nil,
   nil,     7,    13,    21,    25,    26,     6,     8,    22,    23,
    10,    11,    12,    32,    14,    15,    16,    17,    18,    19,
    20,    32,    30,    31,   nil,    21,    25,    26,   nil,   nil,
   nil,    66,   nil,    33,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    33 ]

racc_action_check = [
    60,    85,     1,    26,    59,    25,    36,    58,    47,    71,
    71,     9,    61,    78,    78,    24,    36,    28,    84,    84,
    27,    85,    60,    57,    28,    28,    36,    60,    60,    26,
    26,    26,    25,    25,    61,    47,    47,    29,    61,    61,
    61,    28,    28,    28,     7,    82,    34,    35,    72,     7,
     7,     7,     7,     7,     7,     7,    40,     7,     7,     7,
     7,     7,     7,     7,    51,    82,    13,    13,     7,     7,
     7,    13,    13,    13,    13,    13,    13,    13,    62,    13,
    13,    13,    13,    13,    13,    13,    65,   nil,     0,     0,
    13,    13,    13,     0,     0,     0,     0,     0,     0,     0,
   nil,     0,     0,     0,     0,     0,     0,     0,   nil,   nil,
    42,    42,     0,     0,     0,    42,    42,    42,    42,    42,
    42,    42,   nil,    42,    42,    42,    42,    42,    42,    42,
   nil,    42,    42,    53,    42,    42,    42,   nil,    53,    53,
    53,    53,    53,    53,    53,   nil,    53,    53,    53,    53,
    53,    53,    53,   nil,   nil,    55,    55,    53,    53,    53,
    55,    55,    55,    55,    55,    55,    55,   nil,    55,    55,
    55,    55,    55,    55,    55,   nil,   nil,    64,    64,    55,
    55,    55,    64,    64,    64,    64,    64,    64,    64,   nil,
    64,    64,    64,    64,    64,    64,    64,   nil,    64,    64,
   nil,    64,    64,    64,    66,    66,   nil,    67,   nil,    66,
    66,    66,    66,    66,    66,    66,    68,    66,    66,    66,
    66,    66,    66,    66,    69,    66,    66,    67,    66,    66,
    66,    86,   nil,   nil,   nil,   nil,   nil,    68,    68,   nil,
   nil,    68,    68,   nil,   nil,    69,    69,    70,    70,    69,
    69,    86,    70,    70,    70,    70,    70,    70,    70,   nil,
    70,    70,    70,    70,    70,    70,    70,   nil,   nil,    73,
    73,    70,    70,    70,    73,    73,    73,    73,    73,    73,
    73,   nil,    73,    73,    73,    73,    73,    73,    73,   nil,
   nil,    76,    76,    73,    73,    73,    76,    76,    76,    76,
    76,    76,    76,    54,    76,    76,    76,    76,    76,    76,
    76,     3,     3,     3,   nil,    76,    76,    76,   nil,   nil,
   nil,    54,   nil,    54,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     3 ]

racc_action_pointer = [
    86,     2,   nil,   307,   nil,   nil,   nil,    42,   nil,     2,
   nil,   nil,   nil,    64,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    12,     2,     0,    17,    15,    37,
   nil,   nil,   nil,   nil,    22,    37,     2,   nil,   nil,   nil,
    28,   nil,   108,   nil,   nil,   nil,   nil,     5,   nil,   nil,
   nil,    35,   nil,   131,   299,   153,   nil,     1,   -15,   -21,
    -3,     9,    64,   nil,   175,    61,   202,   203,   214,   222,
   245,   -21,    34,   267,   nil,   nil,   289,   nil,   -14,   nil,
   nil,   nil,    41,   nil,   -12,    -3,   227,   nil ]

racc_action_default = [
   -61,   -61,    -1,    -2,    -5,    -6,    -7,   -38,    -9,   -10,
   -12,   -13,   -14,   -61,   -16,   -17,   -18,   -19,   -20,   -21,
   -22,   -37,   -39,   -40,   -50,   -58,   -46,   -61,   -61,   -61,
    -3,    -4,   -56,   -57,    -8,   -61,   -61,   -48,   -59,   -60,
   -61,   -49,   -23,   -38,   -41,   -42,   -43,   -58,    88,   -11,
   -15,   -46,   -47,   -38,   -24,   -61,   -27,   -28,   -33,   -61,
   -58,   -46,   -61,   -52,   -23,   -61,   -23,   -26,   -30,   -30,
   -61,   -58,   -61,   -61,   -25,   -29,   -61,   -32,   -61,   -44,
   -45,   -34,   -35,   -51,   -58,   -36,   -31,   -54 ]

racc_goto_table = [
     3,    41,    65,     1,    62,    75,    81,    34,    52,    44,
    47,     2,   nil,    36,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    63,   nil,   nil,   nil,    72,    65,    74,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    41,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    83,   nil,   nil,   nil,
   nil,   nil,   nil,    34,   nil,    67,   nil,   nil,   nil,    87,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    82,   nil,   nil,    85,   nil,   nil,    86 ]

racc_goto_check = [
     3,    13,    10,     1,     7,     8,     8,     3,     4,    11,
    12,     2,   nil,     3,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    13,   nil,   nil,   nil,     7,    10,     7,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    13,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    13,   nil,   nil,   nil,
   nil,   nil,   nil,     3,   nil,     3,   nil,   nil,   nil,    13,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     3,   nil,   nil,     3,   nil,   nil,     3 ]

racc_goto_pointer = [
   nil,     3,    11,     0,   -32,   nil,   nil,   -38,   -63,   nil,
   -51,   -19,   -18,   -25,   nil ]

racc_goto_default = [
   nil,   nil,   nil,    54,     4,     5,     9,   nil,    56,    58,
    59,    24,    27,    37,    28 ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 33, :_reduce_none,
  1, 34, :_reduce_2,
  2, 34, :_reduce_3,
  2, 34, :_reduce_4,
  1, 35, :_reduce_5,
  1, 35, :_reduce_none,
  1, 35, :_reduce_7,
  2, 35, :_reduce_8,
  1, 35, :_reduce_9,
  1, 35, :_reduce_10,
  3, 35, :_reduce_11,
  1, 35, :_reduce_12,
  1, 35, :_reduce_13,
  1, 35, :_reduce_14,
  3, 35, :_reduce_15,
  1, 35, :_reduce_16,
  1, 38, :_reduce_17,
  1, 38, :_reduce_18,
  1, 38, :_reduce_19,
  1, 38, :_reduce_20,
  1, 38, :_reduce_21,
  1, 38, :_reduce_22,
  0, 39, :_reduce_23,
  1, 39, :_reduce_24,
  3, 39, :_reduce_25,
  2, 39, :_reduce_26,
  1, 39, :_reduce_none,
  1, 39, :_reduce_28,
  3, 39, :_reduce_29,
  0, 40, :_reduce_30,
  2, 40, :_reduce_31,
  1, 40, :_reduce_32,
  1, 40, :_reduce_33,
  3, 40, :_reduce_34,
  3, 41, :_reduce_35,
  4, 41, :_reduce_36,
  1, 43, :_reduce_none,
  1, 43, :_reduce_none,
  1, 43, :_reduce_none,
  1, 43, :_reduce_40,
  1, 44, :_reduce_none,
  1, 44, :_reduce_none,
  1, 44, :_reduce_none,
  1, 42, :_reduce_none,
  1, 42, :_reduce_none,
  1, 36, :_reduce_46,
  3, 36, :_reduce_47,
  2, 37, :_reduce_48,
  2, 37, :_reduce_49,
  1, 37, :_reduce_50,
  5, 37, :_reduce_51,
  3, 37, :_reduce_52,
  3, 37, :_reduce_53,
  6, 37, :_reduce_54,
  6, 37, :_reduce_55,
  2, 46, :_reduce_56,
  2, 46, :_reduce_57,
  0, 45, :_reduce_58,
  1, 45, :_reduce_59,
  1, 45, :_reduce_60 ]

racc_reduce_n = 61

racc_shift_n = 88

racc_token_table = {
  false => 0,
  :error => 1,
  :EXCLAMATION => 2,
  :LPAREN => 3,
  :DOT => 4,
  :CONDITIONAL_KIND => 5,
  :DISCARDED_KIND => 6,
  :SELF => 7,
  :BOOL => 8,
  :AS => 9,
  :META => 10,
  :DSTR => 11,
  :UNDERBAR => 12,
  :NIL => 13,
  :RPAREN => 14,
  :IVAR => 15,
  :STRING => 16,
  :INT => 17,
  :FLOAT => 18,
  :SYMBOL => 19,
  :NUMBER => 20,
  :REGEXP => 21,
  :COMMA => 22,
  :AMP => 23,
  :DOTDOTDOT => 24,
  :COLON => 25,
  :METHOD => 26,
  :LIDENT => 27,
  :UIDENT => 28,
  :COLONCOLON => 29,
  :WITH_BLOCK => 30,
  :WITHOUT_BLOCK => 31 }

racc_nt_base = 32

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "EXCLAMATION",
  "LPAREN",
  "DOT",
  "CONDITIONAL_KIND",
  "DISCARDED_KIND",
  "SELF",
  "BOOL",
  "AS",
  "META",
  "DSTR",
  "UNDERBAR",
  "NIL",
  "RPAREN",
  "IVAR",
  "STRING",
  "INT",
  "FLOAT",
  "SYMBOL",
  "NUMBER",
  "REGEXP",
  "COMMA",
  "AMP",
  "DOTDOTDOT",
  "COLON",
  "METHOD",
  "LIDENT",
  "UIDENT",
  "COLONCOLON",
  "WITH_BLOCK",
  "WITHOUT_BLOCK",
  "$start",
  "target",
  "kinded_expr",
  "expr",
  "constant",
  "send",
  "literal",
  "args",
  "kw_args",
  "key_value",
  "keyword",
  "method_name",
  "method_name_or_ident",
  "block",
  "receiver" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'parser.y', 11)
  def _reduce_2(val, _values, result)
     result = Kind::Any.new(expr: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 12)
  def _reduce_3(val, _values, result)
     result = Kind::Conditional.new(expr: val[0], negated: val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 13)
  def _reduce_4(val, _values, result)
     result = Kind::Discarded.new(expr: val[0], negated: val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 15)
  def _reduce_5(val, _values, result)
     result = Expr::Constant.new(path: val[0]) 
    result
  end
.,.,

# reduce 6 omitted

module_eval(<<'.,.,', 'parser.y', 17)
  def _reduce_7(val, _values, result)
     result = Expr::Self.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 18)
  def _reduce_8(val, _values, result)
     result = Expr::Not.new(pattern: val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 19)
  def _reduce_9(val, _values, result)
     result = Expr::Literal.new(type: :bool, values: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 20)
  def _reduce_10(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 21)
  def _reduce_11(val, _values, result)
     result = val[0].with_values(resolve_meta(val[2])) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 22)
  def _reduce_12(val, _values, result)
     result = Expr::Dstr.new() 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 23)
  def _reduce_13(val, _values, result)
     result = Expr::Any.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 24)
  def _reduce_14(val, _values, result)
     result = Expr::Nil.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 25)
  def _reduce_15(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 26)
  def _reduce_16(val, _values, result)
     result = Expr::Ivar.new(name: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 29)
  def _reduce_17(val, _values, result)
     result = Expr::Literal.new(type: :string, values: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 30)
  def _reduce_18(val, _values, result)
     result = Expr::Literal.new(type: :int, values: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 31)
  def _reduce_19(val, _values, result)
     result = Expr::Literal.new(type: :float, values: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 32)
  def _reduce_20(val, _values, result)
     result = Expr::Literal.new(type: :symbol, values: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 33)
  def _reduce_21(val, _values, result)
     result = Expr::Literal.new(type: :number, values: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 34)
  def _reduce_22(val, _values, result)
     result = Expr::Literal.new(type: :regexp, values: nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 36)
  def _reduce_23(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 37)
  def _reduce_24(val, _values, result)
     result = Argument::Expr.new(expr: val[0], tail: nil)
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 38)
  def _reduce_25(val, _values, result)
     result = Argument::Expr.new(expr: val[0], tail: val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 39)
  def _reduce_26(val, _values, result)
     result = Argument::BlockPass.new(expr: val[1]) 
    result
  end
.,.,

# reduce 27 omitted

module_eval(<<'.,.,', 'parser.y', 41)
  def _reduce_28(val, _values, result)
     result = Argument::AnySeq.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 42)
  def _reduce_29(val, _values, result)
     result = Argument::AnySeq.new(tail: val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 44)
  def _reduce_30(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 45)
  def _reduce_31(val, _values, result)
     result = Argument::BlockPass.new(expr: val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 46)
  def _reduce_32(val, _values, result)
     result = Argument::AnySeq.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 47)
  def _reduce_33(val, _values, result)
     result = Argument::KeyValue.new(key: val[0][:key],
                                                value: val[0][:value],
                                                tail: nil,
                                                negated: val[0][:negated]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 51)
  def _reduce_34(val, _values, result)
     result = Argument::KeyValue.new(key: val[0][:key],
                                                              value: val[0][:value],
                                                              tail: val[2],
                                                              negated: val[0][:negated]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 56)
  def _reduce_35(val, _values, result)
     result = { key: val[0], value: val[2], negated: false } 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 57)
  def _reduce_36(val, _values, result)
     result = { key: val[1], value: val[3], negated: true } 
    result
  end
.,.,

# reduce 37 omitted

# reduce 38 omitted

# reduce 39 omitted

module_eval(<<'.,.,', 'parser.y', 62)
  def _reduce_40(val, _values, result)
     result = resolve_meta(val[0]) 
    result
  end
.,.,

# reduce 41 omitted

# reduce 42 omitted

# reduce 43 omitted

# reduce 44 omitted

# reduce 45 omitted

module_eval(<<'.,.,', 'parser.y', 70)
  def _reduce_46(val, _values, result)
     result = [val[0]] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 71)
  def _reduce_47(val, _values, result)
     result = [val[0]] + val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 73)
  def _reduce_48(val, _values, result)
     result = val[1] != nil ? Expr::Send.new(receiver: nil, name: val[0], args: Argument::AnySeq.new, block: val[1]) : Expr::Vcall.new(name: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 74)
  def _reduce_49(val, _values, result)
     result = Expr::Send.new(receiver: nil, name: val[0], block: val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 75)
  def _reduce_50(val, _values, result)
     result = Expr::Send.new(receiver: nil, name: val[0], block: nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 76)
  def _reduce_51(val, _values, result)
     result = Expr::Send.new(receiver: nil,
                                                                            name: val[0],
                                                                            args: val[2],
                                                                            block: val[4]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 80)
  def _reduce_52(val, _values, result)
     result = Expr::Send.new(receiver: val[0],
                                                                  name: val[1],
                                                                  args: Argument::AnySeq.new,
                                                                  block: val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 84)
  def _reduce_53(val, _values, result)
     result = Expr::Send.new(receiver: val[0],
                                                                  name: val[1],
                                                                  args: Argument::AnySeq.new,
                                                                  block: val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 88)
  def _reduce_54(val, _values, result)
     result = Expr::Send.new(receiver: val[0],
                                                                                     name: val[1],
                                                                                     args: val[3],
                                                                                     block: val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 92)
  def _reduce_55(val, _values, result)
     result = Expr::Send.new(receiver: val[0],
                                                                                     name: val[1],
                                                                                     args: val[3],
                                                                                     block: val[5]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 97)
  def _reduce_56(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 98)
  def _reduce_57(val, _values, result)
     result = Expr::ReceiverContext.new(receiver: val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 100)
  def _reduce_58(val, _values, result)
     result = nil 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 101)
  def _reduce_59(val, _values, result)
     result = true 
    result
  end
.,.,

module_eval(<<'.,.,', 'parser.y', 102)
  def _reduce_60(val, _values, result)
     result = false 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

    end   # class Parser
    end   # module Pattern
  end   # module Querly
